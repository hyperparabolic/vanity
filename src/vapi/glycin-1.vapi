/* libglycin-1.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Gly", gir_namespace = "Gly", gir_version = "1", lower_case_cprefix = "gly_")]
namespace Gly {
	[CCode (cheader_filename = "glycin.h", type_id = "gly_frame_get_type ()")]
	[Version (since = "1.0")]
	public class Frame : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Frame ();
		public unowned GLib.Bytes get_buf_bytes ();
		public int64 get_delay ();
		public uint32 get_height ();
		public Gly.MemoryFormat get_memory_format ();
		public uint32 get_stride ();
		public uint32 get_width ();
	}
	[CCode (cheader_filename = "glycin.h", type_id = "gly_image_get_type ()")]
	[Version (since = "1.0")]
	public class Image : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Image ();
		public uint32 get_height ();
		public unowned string get_mime_type ();
		public uint32 get_width ();
		public Gly.Frame next_frame () throws GLib.Error;
		public async Gly.Frame next_frame_async (GLib.Cancellable? cancellable) throws GLib.Error;
	}
	[CCode (cheader_filename = "glycin.h", type_id = "gly_loader_get_type ()")]
	[Version (since = "1.0")]
	public class Loader : GLib.Object {
		[CCode (has_construct_function = false)]
		public Loader (GLib.File file);
		public Gly.Image load () throws GLib.Error;
		public async Gly.Image load_async (GLib.Cancellable? cancellable) throws GLib.Error;
		public void set_sandbox_selector (Gly.SandboxSelector sandbox_selector);
		[NoAccessorMethod]
		public GLib.Cancellable cancellable { owned get; set; }
		[NoAccessorMethod]
		public GLib.File file { owned get; construct; }
		[NoAccessorMethod]
		public Gly.SandboxSelector sandbox_selector { get; set; }
	}
	[CCode (cheader_filename = "glycin.h", cprefix = "GLY_MEMORY_", type_id = "gly_memory_format_get_type ()")]
	[Version (since = "1.0")]
	public enum MemoryFormat {
		B8G8R8A8_PREMULTIPLIED,
		A8R8G8B8_PREMULTIPLIED,
		R8G8B8A8_PREMULTIPLIED,
		B8G8R8A8,
		A8R8G8B8,
		R8G8B8A8,
		A8B8G8R8,
		R8G8B8,
		B8G8R8,
		R16G16B16,
		R16G16B16A16_PREMULTIPLIED,
		R16G16B16A16,
		R16G16B16_FLOAT,
		R16G16B16A16_FLOAT,
		R32G32B32_FLOAT,
		R32G32B32A32_FLOAT_PREMULTIPLIED,
		R32G32B32A32_FLOAT,
		G8A8_PREMULTIPLIED,
		G8A8,
		G8,
		G16A16_PREMULTIPLIED,
		G16A16,
		G16;
		public bool has_alpha ();
		public bool is_premultiplied ();
	}
	[CCode (cheader_filename = "glycin.h", cprefix = "GLY_SANDBOX_SELECTOR_", type_id = "gly_sandbox_selector_get_type ()")]
	[Version (since = "1.0")]
	public enum SandboxSelector {
		AUTO,
		BWRAP,
		FLATPAK_SPAWN,
		NOT_SANDBOXED
	}
	[CCode (cheader_filename = "glycin.h", cprefix = "GLY_LOADER_ERROR_", type_id = "gly_loader_error_get_type ()")]
	[Version (since = "1.0")]
	public errordomain LoaderError {
		FAILED,
		UNKNOWN_IMAGE_FORMAT;
		public static GLib.Quark quark ();
	}
	[CCode (cheader_filename = "glycin.h")]
	[Version (replacement = "LoaderError.quark")]
	public static GLib.Quark loader_error_quark ();
	[CCode (cheader_filename = "glycin.h")]
	[Version (replacement = "MemoryFormat.has_alpha", since = "1.0")]
	public static bool memory_format_has_alpha (Gly.MemoryFormat memory_format);
	[CCode (cheader_filename = "glycin.h")]
	[Version (replacement = "MemoryFormat.is_premultiplied", since = "1.0")]
	public static bool memory_format_is_premultiplied (Gly.MemoryFormat memory_format);
}
