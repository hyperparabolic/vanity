/* Generated by vala-dbus-binding-tool 1.0-aa2fb. Do not modify! */
/* Generated with: ../src/vala-dbus-binding-tool --api-path=login1.xml */
using GLib;

namespace Org {

  namespace Freedesktop {

    namespace Login1 {

      [DBus(name = "org.freedesktop.login1.Manager", timeout = 120000)]
      public interface Manager : GLib.Object {

        [DBus(name = "InhibitDelayMaxUSec")]
        public abstract uint64 inhibit_delay_max_u_sec { get; }

        [DBus(name = "PreparingForShutdown")]
        public abstract bool preparing_for_shutdown { get; }

        [DBus(name = "PreparingForSleep")]
        public abstract bool preparing_for_sleep { get; }

        // [DBus(name = "ScheduledShutdown")]
        // public abstract ManagerScheduledShutdownStruct scheduled_shutdown { owned get; }

        [DBus(name = "Docked")]
        public abstract bool docked { get; }

        [DBus(name = "LidClosed")]
        public abstract bool lid_closed { get; }

        [DBus(name = "OnExternalPower")]
        public abstract bool on_external_power { get; }

        [DBus(name = "InhibitorsMax")]
        public abstract uint64 inhibitors_max { get; }

        [DBus(name = "NCurrentInhibitors")]
        public abstract uint64 n_current_inhibitors { get; }

        // [DBus(name = "GetUser")]
        // public abstract GLib.ObjectPath get_user(uint uid) throws DBusError, IOError;

        // [DBus(name = "GetUserByPID")]
        // public abstract GLib.ObjectPath get_user_by_p_i_d(uint pid) throws DBusError, IOError;

        // [DBus(name = "ListUsers")]
        // public abstract ManagerUserStruct[] list_users() throws DBusError, IOError;

        [DBus(name = "ListInhibitors")]
        public abstract ManagerInhibitorStruct[] list_inhibitors() throws DBusError, IOError;

        // [DBus(name = "KillUser")]
        // public abstract void kill_user(uint uid, int signal_number) throws DBusError, IOError;

        // [DBus(name = "TerminateUser")]
        // public abstract void terminate_user(uint uid) throws DBusError, IOError;

        // [DBus(name = "SetUserLinger")]
        // public abstract void set_user_linger(uint uid, bool enable, bool interactive) throws DBusError, IOError;

        [DBus(name = "PowerOff")]
        public abstract void power_off(bool interactive) throws DBusError, IOError;

        [DBus(name = "PowerOffWithFlags")]
        public abstract void power_off_with_flags(uint64 flags) throws DBusError, IOError;

        [DBus(name = "Reboot")]
        public abstract void reboot(bool interactive) throws DBusError, IOError;

        [DBus(name = "RebootWithFlags")]
        public abstract void reboot_with_flags(uint64 flags) throws DBusError, IOError;

        [DBus(name = "Halt")]
        public abstract void halt(bool interactive) throws DBusError, IOError;

        [DBus(name = "HaltWithFlags")]
        public abstract void halt_with_flags(uint64 flags) throws DBusError, IOError;

        [DBus(name = "Suspend")]
        public abstract void suspend(bool interactive) throws DBusError, IOError;

        [DBus(name = "SuspendWithFlags")]
        public abstract void suspend_with_flags(uint64 flags) throws DBusError, IOError;

        [DBus(name = "Hibernate")]
        public abstract void hibernate(bool interactive) throws DBusError, IOError;

        [DBus(name = "HibernateWithFlags")]
        public abstract void hibernate_with_flags(uint64 flags) throws DBusError, IOError;

        [DBus(name = "HybridSleep")]
        public abstract void hybrid_sleep(bool interactive) throws DBusError, IOError;

        [DBus(name = "HybridSleepWithFlags")]
        public abstract void hybrid_sleep_with_flags(uint64 flags) throws DBusError, IOError;

        [DBus(name = "SuspendThenHibernate")]
        public abstract void suspend_then_hibernate(bool interactive) throws DBusError, IOError;

        [DBus(name = "SuspendThenHibernateWithFlags")]
        public abstract void suspend_then_hibernate_with_flags(uint64 flags) throws DBusError, IOError;

        [DBus(name = "Sleep")]
        public abstract void sleep(uint64 flags) throws DBusError, IOError;

        [DBus(name = "CanPowerOff")]
        public abstract string can_power_off() throws DBusError, IOError;

        [DBus(name = "CanReboot")]
        public abstract string can_reboot() throws DBusError, IOError;

        [DBus(name = "CanHalt")]
        public abstract string can_halt() throws DBusError, IOError;

        [DBus(name = "CanSuspend")]
        public abstract string can_suspend() throws DBusError, IOError;

        [DBus(name = "CanHibernate")]
        public abstract string can_hibernate() throws DBusError, IOError;

        [DBus(name = "CanHybridSleep")]
        public abstract string can_hybrid_sleep() throws DBusError, IOError;

        [DBus(name = "CanSuspendThenHibernate")]
        public abstract string can_suspend_then_hibernate() throws DBusError, IOError;

        [DBus(name = "CanSleep")]
        public abstract string can_sleep() throws DBusError, IOError;

        // [DBus(name = "ScheduleShutdown")]
        // public abstract void schedule_shutdown(string type, uint64 usec) throws DBusError, IOError;

        // [DBus(name = "CancelScheduledShutdown")]
        // public abstract bool cancel_scheduled_shutdown() throws DBusError, IOError;

        [DBus(name = "Inhibit")]
        public abstract UnixInputStream inhibit(string what,
                                                string who,
                                                string why,
                                                string mode) throws DBusError, IOError;

        [DBus(name = "CanRebootParameter")]
        public abstract string can_reboot_parameter() throws DBusError, IOError;

        [DBus(name = "SetRebootParameter")]
        public abstract void set_reboot_parameter(string parameter) throws DBusError, IOError;

        [DBus(name = "CanRebootToFirmwareSetup")]
        public abstract string can_reboot_to_firmware_setup() throws DBusError, IOError;

        [DBus(name = "SetRebootToFirmwareSetup")]
        public abstract void set_reboot_to_firmware_setup(bool enable) throws DBusError, IOError;

        [DBus(name = "CanRebootToBootLoaderMenu")]
        public abstract string can_reboot_to_boot_loader_menu() throws DBusError, IOError;

        [DBus(name = "SetRebootToBootLoaderMenu")]
        public abstract void set_reboot_to_boot_loader_menu(uint64 timeout) throws DBusError, IOError;

        [DBus(name = "CanRebootToBootLoaderEntry")]
        public abstract string can_reboot_to_boot_loader_entry() throws DBusError, IOError;

        [DBus(name = "SetRebootToBootLoaderEntry")]
        public abstract void set_reboot_to_boot_loader_entry(string boot_loader_entry) throws DBusError, IOError;

        // [DBus(name = "SetWallMessage")]
        // public abstract void set_wall_message(string wall_message, bool enable) throws DBusError, IOError;

        // [DBus(name = "PrepareForShutdown")]
        // public signal void prepare_for_shutdown(bool start);

        // [DBus(name = "PrepareForShutdownWithMetadata")]
        // public signal void prepare_for_shutdown_with_metadata(bool start, GLib.HashTable<string, GLib.Variant> metadata);

        // [DBus(name = "PrepareForSleep")]
        // public signal void prepare_for_sleep(bool start);
      }

      // public struct ManagerScheduledShutdownStruct {
      // public string attr1;
      // public uint64 attr2;
      // }

      // public struct ManagerUserStruct {
      // public uint attr1;
      // public string attr2;
      // public GLib.ObjectPath attr3;
      // }

      public struct ManagerInhibitorStruct {
        public string attr1;
        public string attr2;
        public string attr3;
        public string attr4;
        public uint attr5;
        public uint attr6;
      }

      [DBus(name = "org.freedesktop.login1.Manager", timeout = 120000)]
      public interface ManagerSync : GLib.Object {

        [DBus(name = "InhibitDelayMaxUSec")]
        public abstract uint64 inhibit_delay_max_u_sec { get; }

        [DBus(name = "UserStopDelayUSec")]
        public abstract uint64 user_stop_delay_u_sec { get; }

        [DBus(name = "PreparingForShutdown")]
        public abstract bool preparing_for_shutdown { get; }

        [DBus(name = "PreparingForSleep")]
        public abstract bool preparing_for_sleep { get; }

        // [DBus(name = "ScheduledShutdown")]
        // public abstract ManagerSyncScheduledShutdownStruct scheduled_shutdown { owned get; }

        [DBus(name = "Docked")]
        public abstract bool docked { get; }

        [DBus(name = "LidClosed")]
        public abstract bool lid_closed { get; }

        [DBus(name = "OnExternalPower")]
        public abstract bool on_external_power { get; }

        [DBus(name = "InhibitorsMax")]
        public abstract uint64 inhibitors_max { get; }

        [DBus(name = "NCurrentInhibitors")]
        public abstract uint64 n_current_inhibitors { get; }

        // [DBus(name = "GetUser")]
        // public abstract GLib.ObjectPath get_user(uint uid) throws DBusError, IOError;

        // [DBus(name = "GetUserByPID")]
        // public abstract GLib.ObjectPath get_user_by_p_i_d(uint pid) throws DBusError, IOError;

        // [DBus(name = "ListUsers")]
        // public abstract ManagerSyncUserStruct[] list_users() throws DBusError, IOError;

        [DBus(name = "ListInhibitors")]
        public abstract ManagerSyncInhibitorStruct[] list_inhibitors() throws DBusError, IOError;

        // [DBus(name = "KillUser")]
        // public abstract void kill_user(uint uid, int signal_number) throws DBusError, IOError;

        // [DBus(name = "TerminateUser")]
        // public abstract void terminate_user(uint uid) throws DBusError, IOError;

        // [DBus(name = "SetUserLinger")]
        // public abstract void set_user_linger(uint uid, bool enable, bool interactive) throws DBusError, IOError;

        [DBus(name = "PowerOff")]
        public abstract void power_off(bool interactive) throws DBusError, IOError;

        [DBus(name = "PowerOffWithFlags")]
        public abstract void power_off_with_flags(uint64 flags) throws DBusError, IOError;

        [DBus(name = "Reboot")]
        public abstract void reboot(bool interactive) throws DBusError, IOError;

        [DBus(name = "RebootWithFlags")]
        public abstract void reboot_with_flags(uint64 flags) throws DBusError, IOError;

        [DBus(name = "Halt")]
        public abstract void halt(bool interactive) throws DBusError, IOError;

        [DBus(name = "HaltWithFlags")]
        public abstract void halt_with_flags(uint64 flags) throws DBusError, IOError;

        [DBus(name = "Suspend")]
        public abstract void suspend(bool interactive) throws DBusError, IOError;

        [DBus(name = "SuspendWithFlags")]
        public abstract void suspend_with_flags(uint64 flags) throws DBusError, IOError;

        [DBus(name = "Hibernate")]
        public abstract void hibernate(bool interactive) throws DBusError, IOError;

        [DBus(name = "HibernateWithFlags")]
        public abstract void hibernate_with_flags(uint64 flags) throws DBusError, IOError;

        [DBus(name = "HybridSleep")]
        public abstract void hybrid_sleep(bool interactive) throws DBusError, IOError;

        [DBus(name = "HybridSleepWithFlags")]
        public abstract void hybrid_sleep_with_flags(uint64 flags) throws DBusError, IOError;

        [DBus(name = "SuspendThenHibernate")]
        public abstract void suspend_then_hibernate(bool interactive) throws DBusError, IOError;

        [DBus(name = "SuspendThenHibernateWithFlags")]
        public abstract void suspend_then_hibernate_with_flags(uint64 flags) throws DBusError, IOError;

        [DBus(name = "Sleep")]
        public abstract void sleep(uint64 flags) throws DBusError, IOError;

        [DBus(name = "CanPowerOff")]
        public abstract string can_power_off() throws DBusError, IOError;

        [DBus(name = "CanReboot")]
        public abstract string can_reboot() throws DBusError, IOError;

        [DBus(name = "CanHalt")]
        public abstract string can_halt() throws DBusError, IOError;

        [DBus(name = "CanSuspend")]
        public abstract string can_suspend() throws DBusError, IOError;

        [DBus(name = "CanHibernate")]
        public abstract string can_hibernate() throws DBusError, IOError;

        [DBus(name = "CanHybridSleep")]
        public abstract string can_hybrid_sleep() throws DBusError, IOError;

        [DBus(name = "CanSuspendThenHibernate")]
        public abstract string can_suspend_then_hibernate() throws DBusError, IOError;

        [DBus(name = "CanSleep")]
        public abstract string can_sleep() throws DBusError, IOError;

        // [DBus(name = "ScheduleShutdown")]
        // public abstract void schedule_shutdown(string type, uint64 usec) throws DBusError, IOError;

        // [DBus(name = "CancelScheduledShutdown")]
        // public abstract bool cancel_scheduled_shutdown() throws DBusError, IOError;

        [DBus(name = "Inhibit")]
        public abstract UnixInputStream inhibit(string what,
                                                string who,
                                                string why,
                                                string mode) throws DBusError, IOError;

        [DBus(name = "CanRebootParameter")]
        public abstract string can_reboot_parameter() throws DBusError, IOError;

        [DBus(name = "SetRebootParameter")]
        public abstract void set_reboot_parameter(string parameter) throws DBusError, IOError;

        [DBus(name = "CanRebootToFirmwareSetup")]
        public abstract string can_reboot_to_firmware_setup() throws DBusError, IOError;

        [DBus(name = "SetRebootToFirmwareSetup")]
        public abstract void set_reboot_to_firmware_setup(bool enable) throws DBusError, IOError;

        [DBus(name = "CanRebootToBootLoaderMenu")]
        public abstract string can_reboot_to_boot_loader_menu() throws DBusError, IOError;

        [DBus(name = "SetRebootToBootLoaderMenu")]
        public abstract void set_reboot_to_boot_loader_menu(uint64 timeout) throws DBusError, IOError;

        [DBus(name = "CanRebootToBootLoaderEntry")]
        public abstract string can_reboot_to_boot_loader_entry() throws DBusError, IOError;

        [DBus(name = "SetRebootToBootLoaderEntry")]
        public abstract void set_reboot_to_boot_loader_entry(string boot_loader_entry) throws DBusError, IOError;

        // [DBus(name = "SetWallMessage")]
        // public abstract void set_wall_message(string wall_message, bool enable) throws DBusError, IOError;

        // [DBus(name = "PrepareForShutdown")]
        // public signal void prepare_for_shutdown(bool start);

        // [DBus(name = "PrepareForShutdownWithMetadata")]
        // public signal void prepare_for_shutdown_with_metadata(bool start, GLib.HashTable<string, GLib.Variant> metadata);

        // [DBus(name = "PrepareForSleep")]
        // public signal void prepare_for_sleep(bool start);
      }

      // public struct ManagerSyncUserStruct {
      // public uint attr1;
      // public string attr2;
      // public GLib.ObjectPath attr3;
      // }

      public struct ManagerSyncInhibitorStruct {
        public string attr1;
        public string attr2;
        public string attr3;
        public string attr4;
        public uint attr5;
        public uint attr6;
      }

      // public struct ManagerSyncScheduledShutdownStruct {
      // public string attr1;
      // public uint64 attr2;
      // }
    }
  }
}
